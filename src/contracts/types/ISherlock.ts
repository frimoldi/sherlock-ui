/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FacetCutStruct = {
  facetAddress: string;
  action: BigNumberish;
  functionSelectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  facetAddress: string;
  action: number;
  functionSelectors: string[];
};

export type FacetStruct = {
  facetAddress: string;
  functionSelectors: BytesLike[];
};

export type FacetStructOutput = [string, string[]] & {
  facetAddress: string;
  functionSelectors: string[];
};

export type UnstakeEntryStruct = {
  blockInitiated: BigNumberish;
  lock: BigNumberish;
};

export type UnstakeEntryStructOutput = [number, BigNumber] & {
  blockInitiated: number;
  lock: BigNumber;
};

export interface ISherlockInterface extends utils.Interface {
  functions: {
    "LockToToken(uint256,address)": FunctionFragment;
    "LockToTokenXRate(address)": FunctionFragment;
    "TokenToLock(uint256,address)": FunctionFragment;
    "TokenToLockXRate(address)": FunctionFragment;
    "_beforeTokenTransfer(address,address,uint256)": FunctionFragment;
    "accrueSherX(address)": FunctionFragment;
    "accrueSherXWatsons()": FunctionFragment;
    "activateCooldown(uint256,address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calcUnderlying(address)": FunctionFragment;
    "calcUnderlyingInStoredUSD(uint256)": FunctionFragment;
    "cancelCooldown(uint256,address)": FunctionFragment;
    "cleanProtocol(bytes32,uint256,bool,address,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositProtocolBalance(bytes32,uint256,address)": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getAccruedDebt(bytes32,address)": FunctionFragment;
    "getCooldown()": FunctionFragment;
    "getCooldownFee(address)": FunctionFragment;
    "getFirstMoneyOut(address)": FunctionFragment;
    "getGovDev()": FunctionFragment;
    "getGovMain()": FunctionFragment;
    "getGovPayout()": FunctionFragment;
    "getGovPool(address)": FunctionFragment;
    "getInitialUnstakeEntry(address,address)": FunctionFragment;
    "getInternalTotalSupply()": FunctionFragment;
    "getInternalTotalSupplySettled()": FunctionFragment;
    "getLockToken(address)": FunctionFragment;
    "getMaxProtocolPool()": FunctionFragment;
    "getMaxTokensSherX()": FunctionFragment;
    "getMaxTokensStaker()": FunctionFragment;
    "getPremiumLastPaid(address)": FunctionFragment;
    "getProtocolAgent(bytes32)": FunctionFragment;
    "getProtocolBalance(bytes32,address)": FunctionFragment;
    "getProtocolIsCovered(bytes32)": FunctionFragment;
    "getProtocolManager(bytes32)": FunctionFragment;
    "getProtocolPremium(bytes32,address)": FunctionFragment;
    "getProtocols(address)": FunctionFragment;
    "getSherXBalance(address)": FunctionFragment;
    "getSherXLastAccrued(address)": FunctionFragment;
    "getSherXPerBlock()": FunctionFragment;
    "getSherXUnderlying(address)": FunctionFragment;
    "getSherXWeight(address)": FunctionFragment;
    "getStakerPoolBalance(address,address)": FunctionFragment;
    "getStakersPoolBalance(address)": FunctionFragment;
    "getStoredUsd(address)": FunctionFragment;
    "getStrategy(address)": FunctionFragment;
    "getTokensSherX()": FunctionFragment;
    "getTokensStaker()": FunctionFragment;
    "getTotalAccruedDebt(address)": FunctionFragment;
    "getTotalPremiumPerBlock(address)": FunctionFragment;
    "getTotalSherX()": FunctionFragment;
    "getTotalSherXPerBlock(address)": FunctionFragment;
    "getTotalSherXUnminted()": FunctionFragment;
    "getTotalUnmintedSherX(address)": FunctionFragment;
    "getTotalUsdLastSettled()": FunctionFragment;
    "getTotalUsdPerBlock()": FunctionFragment;
    "getTotalUsdPool()": FunctionFragment;
    "getTotalUsdPoolStored()": FunctionFragment;
    "getUnactivatedStakersPoolBalance(address)": FunctionFragment;
    "getUnallocatedSherXFor(address,address)": FunctionFragment;
    "getUnallocatedSherXStored(address)": FunctionFragment;
    "getUnallocatedSherXTotal(address)": FunctionFragment;
    "getUnstakeEntry(address,uint256,address)": FunctionFragment;
    "getUnstakeEntrySize(address,address)": FunctionFragment;
    "getUnstakeWindow()": FunctionFragment;
    "getWatsons()": FunctionFragment;
    "getWatsonsSherXPerBlock()": FunctionFragment;
    "getWatsonsSherXWeight()": FunctionFragment;
    "getWatsonsSherxLastAccrued()": FunctionFragment;
    "getWatsonsUnmintedSherX()": FunctionFragment;
    "harvest(address)": FunctionFragment;
    "harvestFor(address,address[])": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initializeSherXERC20(string,string)": FunctionFragment;
    "isPremium(address)": FunctionFragment;
    "isProtocol(bytes32,address)": FunctionFragment;
    "isStake(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "payOffDebtAll(address)": FunctionFragment;
    "payout(address,address[],uint256[],uint256[],uint256[],address)": FunctionFragment;
    "protocolAdd(bytes32,address,address,address[])": FunctionFragment;
    "protocolDepositAdd(bytes32,address[])": FunctionFragment;
    "protocolRemove(bytes32)": FunctionFragment;
    "protocolUpdate(bytes32,address,address)": FunctionFragment;
    "redeem(uint256,address)": FunctionFragment;
    "renounceGovDev()": FunctionFragment;
    "setCooldown(uint40)": FunctionFragment;
    "setCooldownFee(uint32,address)": FunctionFragment;
    "setInitialGovMain(address)": FunctionFragment;
    "setInitialGovPayout(address)": FunctionFragment;
    "setInitialWeight()": FunctionFragment;
    "setMaxProtocolPool(uint8)": FunctionFragment;
    "setMaxTokensSherX(uint8)": FunctionFragment;
    "setMaxTokensStaker(uint8)": FunctionFragment;
    "setProtocolPremium(bytes32,address,uint256)": FunctionFragment;
    "setProtocolPremiumAndTokenPrice(bytes32[],address[][],uint256[][],uint256[][])": FunctionFragment;
    "setTokenPrice(address,uint256)": FunctionFragment;
    "setUnstakeWindow(uint40)": FunctionFragment;
    "setWatsonsAddress(address)": FunctionFragment;
    "setWeights(address[],uint16[],uint256)": FunctionFragment;
    "stake(uint256,address,address)": FunctionFragment;
    "strategyDeposit(uint256,address)": FunctionFragment;
    "strategyRemove(address,address,address[])": FunctionFragment;
    "strategyUpdate(address,address)": FunctionFragment;
    "strategyWithdraw(uint256,address)": FunctionFragment;
    "strategyWithdrawAll(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenDisableProtocol(address,uint256)": FunctionFragment;
    "tokenDisableStakers(address,uint256)": FunctionFragment;
    "tokenInit(address,address,address,bool)": FunctionFragment;
    "tokenRemove(address)": FunctionFragment;
    "tokenUnload(address,address,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferGovDev(address)": FunctionFragment;
    "transferGovMain(address)": FunctionFragment;
    "transferGovPayout(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256,address,address)": FunctionFragment;
    "unstakeWindowExpiry(address,uint256,address)": FunctionFragment;
    "updateSolution((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "withdrawProtocolBalance(bytes32,uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LockToToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "LockToTokenXRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "TokenToLock",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "TokenToLockXRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_beforeTokenTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "accrueSherX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "accrueSherXWatsons",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateCooldown",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUnderlyingInStoredUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCooldown",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanProtocol",
    values: [BytesLike, BigNumberish, boolean, string, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositProtocolBalance",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccruedDebt",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCooldownFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstMoneyOut",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getGovDev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGovMain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovPayout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGovPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getInitialUnstakeEntry",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInternalTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInternalTotalSupplySettled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxProtocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTokensSherX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTokensStaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPremiumLastPaid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolAgent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolBalance",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolIsCovered",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolManager",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolPremium",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocols",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSherXBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSherXLastAccrued",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSherXPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSherXUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSherXWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerPoolBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakersPoolBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredUsd",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokensSherX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensStaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAccruedDebt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPremiumPerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSherX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSherXPerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSherXUnminted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnmintedSherX",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsdLastSettled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsdPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsdPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsdPoolStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnactivatedStakersPoolBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnallocatedSherXFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnallocatedSherXStored",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnallocatedSherXTotal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnstakeEntry",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnstakeEntrySize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnstakeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWatsons",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWatsonsSherXPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWatsonsSherXWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWatsonsSherxLastAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWatsonsUnmintedSherX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "harvestFor",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSherXERC20",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPremium", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isProtocol",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isStake", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payOffDebtAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [
      string,
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolAdd",
    values: [BytesLike, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolDepositAdd",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolRemove",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolUpdate",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceGovDev",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialGovMain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialGovPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxProtocolPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTokensSherX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTokensStaker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolPremium",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolPremiumAndTokenPrice",
    values: [BytesLike[], string[][], BigNumberish[][], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWatsonsAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeights",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyDeposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyRemove",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyUpdate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyWithdrawAll",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenDisableProtocol",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDisableStakers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInit",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "tokenRemove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenUnload",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovDev",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovMain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeWindowExpiry",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSolution",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolBalance",
    values: [BytesLike, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "LockToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LockToTokenXRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokenToLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokenToLockXRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_beforeTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueSherX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueSherXWatsons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUnderlyingInStoredUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositProtocolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCooldownFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstMoneyOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGovDev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGovMain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGovPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGovPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitialUnstakeEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInternalTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInternalTotalSupplySettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxProtocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTokensSherX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTokensStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPremiumLastPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolIsCovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSherXBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSherXLastAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSherXPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSherXUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSherXWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakersPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensSherX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAccruedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPremiumPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSherX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSherXPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSherXUnminted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnmintedSherX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsdLastSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsdPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsdPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsdPoolStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnactivatedStakersPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnallocatedSherXFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnallocatedSherXStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnallocatedSherXTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakeEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakeEntrySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWatsons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWatsonsSherXPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWatsonsSherXWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWatsonsSherxLastAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWatsonsUnmintedSherX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvestFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSherXERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPremium", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProtocol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payOffDebtAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolDepositAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceGovDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialGovMain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialGovPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxProtocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTokensSherX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTokensStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolPremiumAndTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWatsonsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWeights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyWithdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDisableProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDisableStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenUnload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovMain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeWindowExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolBalance",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "Harvest(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { _diamondCut: FacetCutStructOutput[]; _init: string; _calldata: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type HarvestEvent = TypedEvent<
  [string, string],
  { user: string; token: string }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ISherlock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISherlockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LockToToken(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LockToTokenXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    TokenToLock(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    TokenToLockXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "accrueSherX(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "accrueSherX()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accrueSherXWatsons(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateCooldown(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "calcUnderlying(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcUnderlying(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcUnderlying()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcUnderlyingInStoredUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usd: BigNumber }>;

    "calcUnderlyingInStoredUSD()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelCooldown(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cleanProtocol(
      _protocol: BytesLike,
      _index: BigNumberish,
      _forceDebt: boolean,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { facets_: FacetStructOutput[] }>;

    getAccruedDebt(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCooldown(overrides?: CallOverrides): Promise<[number]>;

    getCooldownFee(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFirstMoneyOut(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGovDev(overrides?: CallOverrides): Promise<[string]>;

    getGovMain(overrides?: CallOverrides): Promise<[string]>;

    getGovPayout(overrides?: CallOverrides): Promise<[string]>;

    getGovPool(_token: string, overrides?: CallOverrides): Promise<[string]>;

    getInitialUnstakeEntry(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInternalTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInternalTotalSupplySettled(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLockToken(_token: string, overrides?: CallOverrides): Promise<[string]>;

    getMaxProtocolPool(overrides?: CallOverrides): Promise<[number]>;

    getMaxTokensSherX(overrides?: CallOverrides): Promise<[number]>;

    getMaxTokensStaker(overrides?: CallOverrides): Promise<[number]>;

    getPremiumLastPaid(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getProtocolAgent(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProtocolBalance(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProtocolIsCovered(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getProtocolManager(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProtocolPremium(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProtocols(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getSherXBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSherXBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSherXLastAccrued(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getSherXPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSherXPerBlock(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSherXPerBlock(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSherXPerBlock(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSherXUnderlying(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSherXWeight(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getStakerPoolBalance(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStoredUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStrategy(_token: string, overrides?: CallOverrides): Promise<[string]>;

    getTokensSherX(overrides?: CallOverrides): Promise<[string[]]>;

    getTokensStaker(overrides?: CallOverrides): Promise<[string[]]>;

    getTotalAccruedDebt(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPremiumPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalSherX(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalSherXPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalSherXUnminted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalUnmintedSherX(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalUsdLastSettled(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalUsdPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalUsdPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalUsdPoolStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnactivatedStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnallocatedSherXFor(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnallocatedSherXStored(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnallocatedSherXTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnstakeEntry(
      _staker: string,
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[UnstakeEntryStructOutput]>;

    getUnstakeEntrySize(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnstakeWindow(overrides?: CallOverrides): Promise<[number]>;

    getWatsons(overrides?: CallOverrides): Promise<[string]>;

    getWatsonsSherXPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWatsonsSherXWeight(overrides?: CallOverrides): Promise<[number]>;

    getWatsonsSherxLastAccrued(overrides?: CallOverrides): Promise<[number]>;

    getWatsonsUnmintedSherX(overrides?: CallOverrides): Promise<[BigNumber]>;

    "harvest(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvestFor(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvestFor(address,address)"(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvestFor(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeSherXERC20(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPremium(_token: string, overrides?: CallOverrides): Promise<[boolean]>;

    isProtocol(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStake(_token: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    payOffDebtAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payout(
      _payout: string,
      _tokens: string[],
      _firstMoneyOut: BigNumberish[],
      _amounts: BigNumberish[],
      _unallocatedSherX: BigNumberish[],
      _exclude: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolAdd(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolDepositAdd(
      _protocol: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolRemove(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolUpdate(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceGovDev(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCooldown(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCooldownFee(
      _fee: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInitialGovMain(
      _govMain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInitialGovPayout(
      _govPayout: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInitialWeight(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxProtocolPool(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTokensSherX(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTokensStaker(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolPremium(bytes32,address,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolPremium(bytes32,address[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolPremium(bytes32[],address[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address[][],uint256[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      _newUsd: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32,address[],uint256[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      _newUsd: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address,uint256[],uint256)"(
      _protocol: BytesLike[],
      _token: string,
      _premium: BigNumberish[],
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32,address,uint256,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTokenPrice(address,uint256)"(
      _token: string,
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTokenPrice(address[],uint256[])"(
      _token: string[],
      _newUsd: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnstakeWindow(
      _unstakeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWatsonsAddress(
      _watsons: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWeights(
      _tokens: string[],
      _weights: BigNumberish[],
      _watsons: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyDeposit(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyRemove(
      _token: string,
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyUpdate(
      _strategy: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyWithdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyWithdrawAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenDisableProtocol(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenDisableStakers(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenInit(
      _token: string,
      _govPool: string,
      _lock: string,
      _isProtocolPremium: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRemove(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenUnload(
      _token: string,
      _native: string,
      _remaining: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferGovDev(
      _govDev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferGovMain(
      _govMain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferGovPayout(
      _govPayout: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _id: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeWindowExpiry(
      _account: string,
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSolution(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LockToToken(
    _amount: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  LockToTokenXRate(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  TokenToLock(
    _amount: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  TokenToLockXRate(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _beforeTokenTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "accrueSherX(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "accrueSherX()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accrueSherXWatsons(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateCooldown(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "calcUnderlying(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "calcUnderlying(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "calcUnderlying()"(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "calcUnderlyingInStoredUSD(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcUnderlyingInStoredUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

  cancelCooldown(
    _id: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cleanProtocol(
    _protocol: BytesLike,
    _index: BigNumberish,
    _forceDebt: boolean,
    _receiver: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositProtocolBalance(
    _protocol: BytesLike,
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  getAccruedDebt(
    _protocol: BytesLike,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCooldown(overrides?: CallOverrides): Promise<number>;

  getCooldownFee(_token: string, overrides?: CallOverrides): Promise<number>;

  getFirstMoneyOut(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovDev(overrides?: CallOverrides): Promise<string>;

  getGovMain(overrides?: CallOverrides): Promise<string>;

  getGovPayout(overrides?: CallOverrides): Promise<string>;

  getGovPool(_token: string, overrides?: CallOverrides): Promise<string>;

  getInitialUnstakeEntry(
    _staker: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInternalTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getInternalTotalSupplySettled(overrides?: CallOverrides): Promise<BigNumber>;

  getLockToken(_token: string, overrides?: CallOverrides): Promise<string>;

  getMaxProtocolPool(overrides?: CallOverrides): Promise<number>;

  getMaxTokensSherX(overrides?: CallOverrides): Promise<number>;

  getMaxTokensStaker(overrides?: CallOverrides): Promise<number>;

  getPremiumLastPaid(
    _token: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getProtocolAgent(
    _protocol: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getProtocolBalance(
    _protocol: BytesLike,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtocolIsCovered(
    _protocol: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getProtocolManager(
    _protocol: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getProtocolPremium(
    _protocol: BytesLike,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtocols(_token: string, overrides?: CallOverrides): Promise<string[]>;

  "getSherXBalance(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSherXBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSherXLastAccrued(
    _token: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "getSherXPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getSherXPerBlock(address,address)"(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSherXPerBlock(uint256,address)"(
    _amount: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSherXPerBlock(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSherXUnderlying(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSherXWeight(_token: string, overrides?: CallOverrides): Promise<number>;

  getStakerPoolBalance(
    _staker: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakersPoolBalance(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStoredUsd(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStrategy(_token: string, overrides?: CallOverrides): Promise<string>;

  getTokensSherX(overrides?: CallOverrides): Promise<string[]>;

  getTokensStaker(overrides?: CallOverrides): Promise<string[]>;

  getTotalAccruedDebt(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPremiumPerBlock(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalSherX(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalSherXPerBlock(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalSherXUnminted(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUnmintedSherX(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalUsdLastSettled(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUsdPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUsdPool(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUsdPoolStored(overrides?: CallOverrides): Promise<BigNumber>;

  getUnactivatedStakersPoolBalance(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnallocatedSherXFor(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnallocatedSherXStored(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnallocatedSherXTotal(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnstakeEntry(
    _staker: string,
    _id: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<UnstakeEntryStructOutput>;

  getUnstakeEntrySize(
    _staker: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnstakeWindow(overrides?: CallOverrides): Promise<number>;

  getWatsons(overrides?: CallOverrides): Promise<string>;

  getWatsonsSherXPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getWatsonsSherXWeight(overrides?: CallOverrides): Promise<number>;

  getWatsonsSherxLastAccrued(overrides?: CallOverrides): Promise<number>;

  getWatsonsUnmintedSherX(overrides?: CallOverrides): Promise<BigNumber>;

  "harvest(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest(address[])"(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvestFor(address,address[])"(
    _user: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvestFor(address,address)"(
    _user: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvestFor(address)"(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeSherXERC20(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPremium(_token: string, overrides?: CallOverrides): Promise<boolean>;

  isProtocol(
    _protocol: BytesLike,
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStake(_token: string, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payOffDebtAll(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payout(
    _payout: string,
    _tokens: string[],
    _firstMoneyOut: BigNumberish[],
    _amounts: BigNumberish[],
    _unallocatedSherX: BigNumberish[],
    _exclude: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolAdd(
    _protocol: BytesLike,
    _eoaProtocolAgent: string,
    _eoaManager: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolDepositAdd(
    _protocol: BytesLike,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolRemove(
    _protocol: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolUpdate(
    _protocol: BytesLike,
    _eoaProtocolAgent: string,
    _eoaManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceGovDev(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCooldown(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCooldownFee(
    _fee: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInitialGovMain(
    _govMain: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInitialGovPayout(
    _govPayout: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInitialWeight(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxProtocolPool(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTokensSherX(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTokensStaker(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolPremium(bytes32,address,uint256)"(
    _protocol: BytesLike,
    _token: string,
    _premium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolPremium(bytes32,address[],uint256[])"(
    _protocol: BytesLike,
    _token: string[],
    _premium: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolPremium(bytes32[],address[][],uint256[][])"(
    _protocol: BytesLike[],
    _token: string[][],
    _premium: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolPremiumAndTokenPrice(bytes32[],address[][],uint256[][],uint256[][])"(
    _protocol: BytesLike[],
    _token: string[][],
    _premium: BigNumberish[][],
    _newUsd: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolPremiumAndTokenPrice(bytes32,address[],uint256[],uint256[])"(
    _protocol: BytesLike,
    _token: string[],
    _premium: BigNumberish[],
    _newUsd: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolPremiumAndTokenPrice(bytes32[],address,uint256[],uint256)"(
    _protocol: BytesLike[],
    _token: string,
    _premium: BigNumberish[],
    _newUsd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolPremiumAndTokenPrice(bytes32,address,uint256,uint256)"(
    _protocol: BytesLike,
    _token: string,
    _premium: BigNumberish,
    _newUsd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTokenPrice(address,uint256)"(
    _token: string,
    _newUsd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTokenPrice(address[],uint256[])"(
    _token: string[],
    _newUsd: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnstakeWindow(
    _unstakeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWatsonsAddress(
    _watsons: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWeights(
    _tokens: string[],
    _weights: BigNumberish[],
    _watsons: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    _receiver: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyDeposit(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyRemove(
    _token: string,
    _receiver: string,
    _extraTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyUpdate(
    _strategy: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyWithdraw(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyWithdrawAll(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenDisableProtocol(
    _token: string,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenDisableStakers(
    _token: string,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenInit(
    _token: string,
    _govPool: string,
    _lock: string,
    _isProtocolPremium: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRemove(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenUnload(
    _token: string,
    _native: string,
    _remaining: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferGovDev(
    _govDev: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferGovMain(
    _govMain: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferGovPayout(
    _govPayout: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _id: BigNumberish,
    _receiver: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeWindowExpiry(
    _account: string,
    _id: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSolution(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolBalance(
    _protocol: BytesLike,
    _amount: BigNumberish,
    _receiver: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LockToToken(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LockToTokenXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenToLock(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenToLockXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "accrueSherX(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "accrueSherX()"(overrides?: CallOverrides): Promise<void>;

    accrueSherXWatsons(overrides?: CallOverrides): Promise<void>;

    activateCooldown(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "calcUnderlying(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcUnderlying(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcUnderlying()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcUnderlyingInStoredUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcUnderlyingInStoredUSD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelCooldown(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanProtocol(
      _protocol: BytesLike,
      _index: BigNumberish,
      _forceDebt: boolean,
      _receiver: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    getAccruedDebt(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCooldown(overrides?: CallOverrides): Promise<number>;

    getCooldownFee(_token: string, overrides?: CallOverrides): Promise<number>;

    getFirstMoneyOut(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovDev(overrides?: CallOverrides): Promise<string>;

    getGovMain(overrides?: CallOverrides): Promise<string>;

    getGovPayout(overrides?: CallOverrides): Promise<string>;

    getGovPool(_token: string, overrides?: CallOverrides): Promise<string>;

    getInitialUnstakeEntry(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInternalTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getInternalTotalSupplySettled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockToken(_token: string, overrides?: CallOverrides): Promise<string>;

    getMaxProtocolPool(overrides?: CallOverrides): Promise<number>;

    getMaxTokensSherX(overrides?: CallOverrides): Promise<number>;

    getMaxTokensStaker(overrides?: CallOverrides): Promise<number>;

    getPremiumLastPaid(
      _token: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getProtocolAgent(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getProtocolBalance(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolIsCovered(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProtocolManager(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getProtocolPremium(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocols(_token: string, overrides?: CallOverrides): Promise<string[]>;

    "getSherXBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSherXBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSherXLastAccrued(
      _token: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "getSherXPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getSherXPerBlock(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSherXPerBlock(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSherXPerBlock(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSherXUnderlying(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSherXWeight(_token: string, overrides?: CallOverrides): Promise<number>;

    getStakerPoolBalance(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredUsd(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStrategy(_token: string, overrides?: CallOverrides): Promise<string>;

    getTokensSherX(overrides?: CallOverrides): Promise<string[]>;

    getTokensStaker(overrides?: CallOverrides): Promise<string[]>;

    getTotalAccruedDebt(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPremiumPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSherX(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSherXPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSherXUnminted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnmintedSherX(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUsdLastSettled(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdPool(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdPoolStored(overrides?: CallOverrides): Promise<BigNumber>;

    getUnactivatedStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedSherXFor(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedSherXStored(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedSherXTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakeEntry(
      _staker: string,
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<UnstakeEntryStructOutput>;

    getUnstakeEntrySize(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakeWindow(overrides?: CallOverrides): Promise<number>;

    getWatsons(overrides?: CallOverrides): Promise<string>;

    getWatsonsSherXPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getWatsonsSherXWeight(overrides?: CallOverrides): Promise<number>;

    getWatsonsSherxLastAccrued(overrides?: CallOverrides): Promise<number>;

    getWatsonsUnmintedSherX(overrides?: CallOverrides): Promise<BigNumber>;

    "harvest(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    "harvest(address[])"(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "harvestFor(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "harvestFor(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvestFor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeSherXERC20(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPremium(_token: string, overrides?: CallOverrides): Promise<boolean>;

    isProtocol(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStake(_token: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payOffDebtAll(_token: string, overrides?: CallOverrides): Promise<void>;

    payout(
      _payout: string,
      _tokens: string[],
      _firstMoneyOut: BigNumberish[],
      _amounts: BigNumberish[],
      _unallocatedSherX: BigNumberish[],
      _exclude: string,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolAdd(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    protocolDepositAdd(
      _protocol: BytesLike,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    protocolRemove(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolUpdate(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceGovDev(overrides?: CallOverrides): Promise<void>;

    setCooldown(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCooldownFee(
      _fee: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialGovMain(
      _govMain: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialGovPayout(
      _govPayout: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialWeight(overrides?: CallOverrides): Promise<void>;

    setMaxProtocolPool(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTokensSherX(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTokensStaker(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPremium(bytes32,address,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPremium(bytes32,address[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPremium(bytes32[],address[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address[][],uint256[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      _newUsd: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPremiumAndTokenPrice(bytes32,address[],uint256[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      _newUsd: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address,uint256[],uint256)"(
      _protocol: BytesLike[],
      _token: string,
      _premium: BigNumberish[],
      _newUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPremiumAndTokenPrice(bytes32,address,uint256,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      _newUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenPrice(address,uint256)"(
      _token: string,
      _newUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenPrice(address[],uint256[])"(
      _token: string[],
      _newUsd: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUnstakeWindow(
      _unstakeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWatsonsAddress(
      _watsons: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeights(
      _tokens: string[],
      _weights: BigNumberish[],
      _watsons: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyDeposit(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyRemove(
      _token: string,
      _receiver: string,
      _extraTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    strategyUpdate(
      _strategy: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyWithdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyWithdrawAll(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenDisableProtocol(
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenDisableStakers(
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenInit(
      _token: string,
      _govPool: string,
      _lock: string,
      _isProtocolPremium: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRemove(_token: string, overrides?: CallOverrides): Promise<void>;

    tokenUnload(
      _token: string,
      _native: string,
      _remaining: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferGovDev(_govDev: string, overrides?: CallOverrides): Promise<void>;

    transferGovMain(_govMain: string, overrides?: CallOverrides): Promise<void>;

    transferGovPayout(
      _govPayout: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _id: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeWindowExpiry(
      _account: string,
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSolution(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "Harvest(address,address)"(
      user?: string | null,
      token?: string | null
    ): HarvestEventFilter;
    Harvest(user?: string | null, token?: string | null): HarvestEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    LockToToken(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LockToTokenXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenToLock(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenToLockXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "accrueSherX(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "accrueSherX()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accrueSherXWatsons(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateCooldown(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "calcUnderlying(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcUnderlying(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    "calcUnderlyingInStoredUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcUnderlyingInStoredUSD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelCooldown(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cleanProtocol(
      _protocol: BytesLike,
      _index: BigNumberish,
      _forceDebt: boolean,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    getAccruedDebt(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getCooldownFee(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirstMoneyOut(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovDev(overrides?: CallOverrides): Promise<BigNumber>;

    getGovMain(overrides?: CallOverrides): Promise<BigNumber>;

    getGovPayout(overrides?: CallOverrides): Promise<BigNumber>;

    getGovPool(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInitialUnstakeEntry(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInternalTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getInternalTotalSupplySettled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMaxProtocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxTokensSherX(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxTokensStaker(overrides?: CallOverrides): Promise<BigNumber>;

    getPremiumLastPaid(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolAgent(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolBalance(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolIsCovered(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolManager(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolPremium(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocols(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getSherXBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSherXBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSherXLastAccrued(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSherXPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getSherXPerBlock(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSherXPerBlock(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSherXPerBlock(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSherXUnderlying(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSherXWeight(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerPoolBalance(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredUsd(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStrategy(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensSherX(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensStaker(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAccruedDebt(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPremiumPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSherX(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSherXPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSherXUnminted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnmintedSherX(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUsdLastSettled(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdPool(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdPoolStored(overrides?: CallOverrides): Promise<BigNumber>;

    getUnactivatedStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedSherXFor(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedSherXStored(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedSherXTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakeEntry(
      _staker: string,
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakeEntrySize(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    getWatsons(overrides?: CallOverrides): Promise<BigNumber>;

    getWatsonsSherXPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getWatsonsSherXWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getWatsonsSherxLastAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    getWatsonsUnmintedSherX(overrides?: CallOverrides): Promise<BigNumber>;

    "harvest(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvestFor(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvestFor(address,address)"(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvestFor(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeSherXERC20(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPremium(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    isProtocol(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStake(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payOffDebtAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payout(
      _payout: string,
      _tokens: string[],
      _firstMoneyOut: BigNumberish[],
      _amounts: BigNumberish[],
      _unallocatedSherX: BigNumberish[],
      _exclude: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolAdd(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolDepositAdd(
      _protocol: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolRemove(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolUpdate(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceGovDev(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCooldown(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCooldownFee(
      _fee: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInitialGovMain(
      _govMain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInitialGovPayout(
      _govPayout: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInitialWeight(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxProtocolPool(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTokensSherX(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTokensStaker(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolPremium(bytes32,address,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolPremium(bytes32,address[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolPremium(bytes32[],address[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address[][],uint256[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      _newUsd: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolPremiumAndTokenPrice(bytes32,address[],uint256[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      _newUsd: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address,uint256[],uint256)"(
      _protocol: BytesLike[],
      _token: string,
      _premium: BigNumberish[],
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolPremiumAndTokenPrice(bytes32,address,uint256,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTokenPrice(address,uint256)"(
      _token: string,
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTokenPrice(address[],uint256[])"(
      _token: string[],
      _newUsd: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnstakeWindow(
      _unstakeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWatsonsAddress(
      _watsons: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWeights(
      _tokens: string[],
      _weights: BigNumberish[],
      _watsons: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyDeposit(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyRemove(
      _token: string,
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyUpdate(
      _strategy: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyWithdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyWithdrawAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDisableProtocol(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenDisableStakers(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenInit(
      _token: string,
      _govPool: string,
      _lock: string,
      _isProtocolPremium: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRemove(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenUnload(
      _token: string,
      _native: string,
      _remaining: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferGovDev(
      _govDev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferGovMain(
      _govMain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferGovPayout(
      _govPayout: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _id: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeWindowExpiry(
      _account: string,
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSolution(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LockToToken(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LockToTokenXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TokenToLock(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TokenToLockXRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "accrueSherX(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "accrueSherX()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accrueSherXWatsons(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateCooldown(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcUnderlying(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcUnderlying(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcUnderlying()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcUnderlyingInStoredUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcUnderlyingInStoredUSD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelCooldown(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cleanProtocol(
      _protocol: BytesLike,
      _index: BigNumberish,
      _forceDebt: boolean,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccruedDebt(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCooldownFee(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstMoneyOut(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovDev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovMain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovPool(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialUnstakeEntry(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInternalTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInternalTotalSupplySettled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxProtocolPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTokensSherX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxTokensStaker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPremiumLastPaid(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolAgent(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolBalance(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolIsCovered(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolManager(
      _protocol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolPremium(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocols(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSherXBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSherXBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSherXLastAccrued(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSherXPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSherXPerBlock(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSherXPerBlock(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSherXPerBlock(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSherXUnderlying(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSherXWeight(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerPoolBalance(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStoredUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategy(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensSherX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensStaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalAccruedDebt(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPremiumPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSherX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSherXPerBlock(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSherXUnminted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUnmintedSherX(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUsdLastSettled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUsdPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUsdPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalUsdPoolStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnactivatedStakersPoolBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnallocatedSherXFor(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnallocatedSherXStored(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnallocatedSherXTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnstakeEntry(
      _staker: string,
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnstakeEntrySize(
      _staker: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnstakeWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWatsons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWatsonsSherXPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWatsonsSherXWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWatsonsSherxLastAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWatsonsUnmintedSherX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "harvest(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvestFor(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvestFor(address,address)"(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvestFor(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeSherXERC20(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPremium(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProtocol(
      _protocol: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStake(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payOffDebtAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payout(
      _payout: string,
      _tokens: string[],
      _firstMoneyOut: BigNumberish[],
      _amounts: BigNumberish[],
      _unallocatedSherX: BigNumberish[],
      _exclude: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolAdd(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolDepositAdd(
      _protocol: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolRemove(
      _protocol: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolUpdate(
      _protocol: BytesLike,
      _eoaProtocolAgent: string,
      _eoaManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceGovDev(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCooldown(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCooldownFee(
      _fee: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInitialGovMain(
      _govMain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInitialGovPayout(
      _govPayout: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInitialWeight(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxProtocolPool(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTokensSherX(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTokensStaker(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolPremium(bytes32,address,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolPremium(bytes32,address[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolPremium(bytes32[],address[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address[][],uint256[][],uint256[][])"(
      _protocol: BytesLike[],
      _token: string[][],
      _premium: BigNumberish[][],
      _newUsd: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32,address[],uint256[],uint256[])"(
      _protocol: BytesLike,
      _token: string[],
      _premium: BigNumberish[],
      _newUsd: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32[],address,uint256[],uint256)"(
      _protocol: BytesLike[],
      _token: string,
      _premium: BigNumberish[],
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolPremiumAndTokenPrice(bytes32,address,uint256,uint256)"(
      _protocol: BytesLike,
      _token: string,
      _premium: BigNumberish,
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenPrice(address,uint256)"(
      _token: string,
      _newUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenPrice(address[],uint256[])"(
      _token: string[],
      _newUsd: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnstakeWindow(
      _unstakeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWatsonsAddress(
      _watsons: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWeights(
      _tokens: string[],
      _weights: BigNumberish[],
      _watsons: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyDeposit(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyRemove(
      _token: string,
      _receiver: string,
      _extraTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyUpdate(
      _strategy: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyWithdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyWithdrawAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDisableProtocol(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenDisableStakers(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenInit(
      _token: string,
      _govPool: string,
      _lock: string,
      _isProtocolPremium: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRemove(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenUnload(
      _token: string,
      _native: string,
      _remaining: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferGovDev(
      _govDev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferGovMain(
      _govMain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferGovPayout(
      _govPayout: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _id: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeWindowExpiry(
      _account: string,
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSolution(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolBalance(
      _protocol: BytesLike,
      _amount: BigNumberish,
      _receiver: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
